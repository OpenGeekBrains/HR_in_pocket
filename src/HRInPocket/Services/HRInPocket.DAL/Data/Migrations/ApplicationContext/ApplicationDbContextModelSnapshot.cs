// <auto-generated />
using System;
using HRInPocket.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HRInPocket.DAL.Data.Migrations.ApplicationContext
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ApplicantProfileSpeciality", b =>
                {
                    b.Property<Guid>("ApplicantsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicantsId", "SpecialityId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("ApplicantProfileSpeciality");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Base.BaseProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("image");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseProfile");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseProfile");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.ActivityCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityCategories");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FactAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LegalAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FactAddressId");

                    b.HasIndex("LegalAddressId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.CoverLetter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicantProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantProfileId");

                    b.ToTable("CoverLetters");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.CoverLetterValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoverLetterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoverLetterId");

                    b.ToTable("CoverLetterValue");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.PriceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Price");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Resume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicantProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantProfileId");

                    b.ToTable("Resumes");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.ResumeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResumeId");

                    b.ToTable("ResumeValue");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActivityCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityCategoryId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.TargetTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicantProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoverLetterLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CreateCoverLetter")
                        .HasColumnType("bit");

                    b.Property<bool>("CreateResume")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManagerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RemoteWork")
                        .HasColumnType("bit");

                    b.Property<string>("ResumeLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("SpecialityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ApplicantProfileId");

                    b.HasIndex("ManagerProfileId");

                    b.HasIndex("SpecialityId");

                    b.ToTable("TargetTasks");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Tarif", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Visits")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tarifs");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.TaskHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("TargetTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TargetTaskId")
                        .IsUnique();

                    b.ToTable("TaskHistory");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.TaskHistoryRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskHistoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskHistoryId");

                    b.ToTable("TaskHistoryRecord");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Telephone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BaseProfileId");

                    b.ToTable("Telephone");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxSalary")
                        .HasColumnType("int");

                    b.Property<int>("MinSalary")
                        .HasColumnType("int");

                    b.Property<Guid?>("SpecialtyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Profiles.ApplicantProfile", b =>
                {
                    b.HasBaseType("HRInPocket.Domain.Entities.Base.BaseProfile");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TarifId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AddressId");

                    b.HasIndex("TarifId");

                    b.HasDiscriminator().HasValue("ApplicantProfile");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Profiles.ManagerProfile", b =>
                {
                    b.HasBaseType("HRInPocket.Domain.Entities.Base.BaseProfile");

                    b.HasDiscriminator().HasValue("ManagerProfile");
                });

            modelBuilder.Entity("ApplicantProfileSpeciality", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Profiles.ApplicantProfile", null)
                        .WithMany()
                        .HasForeignKey("ApplicantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRInPocket.Domain.Entities.Data.Speciality", null)
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Company", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Data.Address", "FactAddress")
                        .WithMany()
                        .HasForeignKey("FactAddressId");

                    b.HasOne("HRInPocket.Domain.Entities.Data.Address", "LegalAddress")
                        .WithMany()
                        .HasForeignKey("LegalAddressId");

                    b.Navigation("FactAddress");

                    b.Navigation("LegalAddress");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.CoverLetter", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Profiles.ApplicantProfile", "ApplicantProfile")
                        .WithMany("CoverLetters")
                        .HasForeignKey("ApplicantProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantProfile");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.CoverLetterValue", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Data.CoverLetter", null)
                        .WithMany("Values")
                        .HasForeignKey("CoverLetterId");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Metadata", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Data.Company", "Company")
                        .WithMany("Metadatas")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Resume", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Profiles.ApplicantProfile", "ApplicantProfile")
                        .WithMany("Resumes")
                        .HasForeignKey("ApplicantProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantProfile");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.ResumeValue", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Data.Resume", null)
                        .WithMany("Values")
                        .HasForeignKey("ResumeId");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Speciality", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Data.ActivityCategory", "ActivityCategory")
                        .WithMany("Specialties")
                        .HasForeignKey("ActivityCategoryId");

                    b.Navigation("ActivityCategory");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.TargetTask", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Data.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("HRInPocket.Domain.Entities.Profiles.ApplicantProfile", "ApplicantProfile")
                        .WithMany("TargetTasks")
                        .HasForeignKey("ApplicantProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRInPocket.Domain.Entities.Profiles.ManagerProfile", "ManagerProfile")
                        .WithMany("TargetTasks")
                        .HasForeignKey("ManagerProfileId");

                    b.HasOne("HRInPocket.Domain.Entities.Data.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId");

                    b.Navigation("Address");

                    b.Navigation("ApplicantProfile");

                    b.Navigation("ManagerProfile");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.TaskHistory", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Data.TargetTask", "TargetTask")
                        .WithOne("TaskHistory")
                        .HasForeignKey("HRInPocket.Domain.Entities.Data.TaskHistory", "TargetTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TargetTask");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.TaskHistoryRecord", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Data.TaskHistory", "TaskHistory")
                        .WithMany("TaskHistoryRecords")
                        .HasForeignKey("TaskHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskHistory");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Telephone", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Base.BaseProfile", "BaseProfile")
                        .WithMany("TelNumbers")
                        .HasForeignKey("BaseProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseProfile");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Vacancy", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Data.Company", "Company")
                        .WithMany("Vacancies")
                        .HasForeignKey("CompanyId");

                    b.HasOne("HRInPocket.Domain.Entities.Data.Speciality", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId");

                    b.Navigation("Company");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Profiles.ApplicantProfile", b =>
                {
                    b.HasOne("HRInPocket.Domain.Entities.Data.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("HRInPocket.Domain.Entities.Data.Tarif", null)
                        .WithMany("ApplicntApplicantProfiles")
                        .HasForeignKey("TarifId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Base.BaseProfile", b =>
                {
                    b.Navigation("TelNumbers");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.ActivityCategory", b =>
                {
                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Company", b =>
                {
                    b.Navigation("Metadatas");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.CoverLetter", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Resume", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.TargetTask", b =>
                {
                    b.Navigation("TaskHistory");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.Tarif", b =>
                {
                    b.Navigation("ApplicntApplicantProfiles");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Data.TaskHistory", b =>
                {
                    b.Navigation("TaskHistoryRecords");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Profiles.ApplicantProfile", b =>
                {
                    b.Navigation("CoverLetters");

                    b.Navigation("Resumes");

                    b.Navigation("TargetTasks");
                });

            modelBuilder.Entity("HRInPocket.Domain.Entities.Profiles.ManagerProfile", b =>
                {
                    b.Navigation("TargetTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
